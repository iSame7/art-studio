---
import { getCollection, type CollectionEntry } from "astro:content";
import Layout from "../../components/layout.astro";
import Tag from "../../components/tag.astro";
import DateTag from "../../components/date-tag.astro";
import PostContent from "../../components/post/post-content.astro";
import BaseLayout from '../../layouts/BaseLayout.astro';
import ContactCTA from '../../components/ContactCTA.astro';
import Icon from '../../components/Icon.astro';


export async function getStaticPaths() {
  const posts = await getCollection("blog");
  return posts.map((post) => ({
    params: { slug: post.slug },
    props: { post },
  }));
}

type Props = {
  post: CollectionEntry<"blog">;
};

const { post } = Astro.props;
const { title, description, date, tags, cover } = post.data;
---


<BaseLayout
	title="Journal"
	description="Sameh Mabrouk's journal"
>
	<div class="stack gap-20">
    <div class="stack gap-15">

    <header>
      <div class="wrapper stack gap-2">
        <a class="back-link" href="/journal/"><Icon icon="arrow-left" />Journal</a>
      </div>
    </header>

		<main class="wrapper stack gap-8">

      <Layout title={post.data.title} description={post.data.description}>
        <div>
          <div>
            <h1>{post.data.title}</h1>
            <p class="post-summary">{post.data.description}</p>
          </div>
          <div class="meta">
            <DateTag date={post.data.date} />
            {post.data.tags?.map((tag) => <Tag tag={tag} />)}
          </div>
          {
            post.data.cover && (
              <figure class="cover-image">
              <img src={`${post.data.cover}?w=1200&q=80`} alt="cover" />
              </figure>
            )
          }
        </div>
        <article>
          <PostContent post={post} />
        </article>
      </Layout>

		</main>
  </div>
		<ContactCTA />
	</div>
</BaseLayout>


<style>
	header {
		padding-bottom: 2.5rem;
		border-bottom: 1px solid var(--gray-800);
	}

	.back-link {
		display: none;
	}

	.details {
		display: flex;
		flex-direction: column;
		padding: 0.5rem;
		gap: 1.5rem;
		justify-content: space-between;
		align-items: center;
	}

	.tags {
		display: flex;
		gap: 0.5rem;
	}

	.description {
		font-size: var(--text-lg);
		max-width: 54ch;
	}

	.content {
		max-width: 65ch;
		margin-inline: auto;
	}

	.content > :global(* + *) {
		margin-top: 1rem;
	}

	.content :global(h1),
	.content :global(h2),
	.content :global(h3),
	.content :global(h4),
	.content :global(h5) {
		margin: 1.5rem 0;
	}

	.content :global(img) {
		/* border-radius: 1.5rem; */
		box-shadow: var(--shadow-sm);
		background: var(--gradient-subtle);
		border: 1px solid var(--gray-800);
	}

	.content :global(blockquote) {
		font-size: var(--text-lg);
		font-family: var(--font-brand);
		font-weight: 600;
		line-height: 1.1;
		padding-inline-start: 1.5rem;
		border-inline-start: 0.25rem solid var(--accent-dark);
		color: var(--gray-0);
	}

	.back-link,
	.content :global(a) {
		text-decoration: 1px solid underline transparent;
		text-underline-offset: 0.25em;
		transition: text-decoration-color var(--theme-transition);
	}

	.back-link:hover,
	.back-link:focus,
	.content :global(a:hover),
	.content :global(a:focus) {
		text-decoration-color: currentColor;
	}

	@media (min-width: 50em) {
		.back-link {
			display: block;
			align-self: flex-start;
		}

		.details {
			flex-direction: row;
			gap: 2.5rem;
		}

		.content :global(blockquote) {
			font-size: var(--text-2xl);
		}
	}
</style>
